package GUI;

import crdt.Crdt;
import crdt.OperationType;
import javax.swing.*;
import javax.swing.border.BevelBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FileDialog;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.FileWriter;
import java.io.IOException;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author NAFIS, ALLEN
 */

public class NotePadGUI extends JFrame {

    /**
	 * 
	 */
	private static final long serialVersionUID = -1350591122130493068L;
	/**
     * Creates new form NotePadGUI
     */

    private String fileName;
    private Clipboard clipBoard = getToolkit().getSystemClipboard();
    private static Crdt data;
    private static boolean isFromOthers = false;
    private static int cursorPosition = 0;
    private static NotePadGUI instance = null;
    private JTextArea textArea;

    public NotePadGUI() {
        initComponents();
//        setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
    }
    
    public static NotePadGUI getInstance() {
    	if (instance==null) {
    		instance = new NotePadGUI();
    	}
    	return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private String previousText = "";
    private void initComponents() {

        JPanel jPanel1 = new JPanel();
        JScrollPane jScrollPane1 = new JScrollPane();
        textArea = new JTextArea();
        JMenuBar jMenuBar1 = new JMenuBar();
        JMenu file = new JMenu();
        //JMenuItem newFile = new JMenuItem();
        //JMenuItem openFile = new JMenuItem();
        JMenuItem saveFile = new JMenuItem();
        JMenuItem exit = new JMenuItem();
        JMenu menu = new JMenu();
        JMenuItem cutText = new JMenuItem();
        // Variables declaration - do not modify                     
        JMenuItem copyText = new JMenuItem();
        JMenuItem pasteText = new JMenuItem();
        JMenu connectionInfo = new JMenu("Connections");
        JMenuItem showConnectionInfo = new JMenuItem("Show/Hide");

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new Dimension(700, 700));
        setLocation(505, 0);
        setResizable(false);

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        textArea.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                super.keyPressed(e);
                previousText = textArea.getText();
            }
        });

        // Add a caretListener to the editor. This is an anonymous class because it is inline and has no specific name.
        // Each time the caret is moved, it will trigger the listener and update the cursorPosition accordingly.
        textArea.addCaretListener(e -> {
            JTextArea editArea = (JTextArea)e.getSource();
            try {
                int caretpos = editArea.getCaretPosition();
//                System.out.println("cursor position changed: " + caretpos);
                cursorPosition = caretpos;
            }
            catch(Exception ex) {
                System.out.println("something happens with addCaretListener()");
            }
        });

        textArea.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                if(isFromOthers){
                    return;
                }
                try {
                    String insertedText = e.getDocument().getText(e.getOffset(),e.getLength());
//                    System.out.println("inserting "+insertedText+" from "+e.getOffset());
                    multipleInsert(insertedText,e.getOffset());
                } catch (BadLocationException ex) {
                    ex.printStackTrace();
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                if(isFromOthers){
                    return;
                }
                String removedText = previousText.substring(e.getOffset(), e.getOffset() + e.getLength());
//                System.out.println("removing "+removedText+" from "+e.getOffset());
                multipleDelete(removedText,e.getOffset()+1);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
        );

        file.setText("File");

        //newFile.setText("New File");
        //newFile.addActionListener(this::newFileActionPerformed);
        //file.add(newFile);

        //openFile.setText("Open File");
        //openFile.addActionListener(this::openFileActionPerformed);
        //file.add(openFile);

        saveFile.setText("Save File");
        saveFile.addActionListener(this::saveFileActionPerformed);
        file.add(saveFile);

        exit.setText("Exit");
        exit.addActionListener(this::exitActionPerformed);
        file.add(exit);

        jMenuBar1.add(file);

        menu.setText("Edit");

        cutText.setText("Cut");
        cutText.addActionListener(this::cutTextActionPerformed);
        menu.add(cutText);

        copyText.setText("Copy");
        copyText.addActionListener(this::copyTextActionPerformed);
        menu.add(copyText);

        pasteText.setText("Paste");
        pasteText.addActionListener(this::pasteTextActionPerformed);
        menu.add(pasteText);

        jMenuBar1.add(menu);
        
        showConnectionInfo.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				ConnectionInfo.getInstance().setVisible(!ConnectionInfo.getInstance().isVisible());
			}
		});
        
        connectionInfo.add(showConnectionInfo);
        
        jMenuBar1.add(connectionInfo);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:

        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    private void saveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileActionPerformed
        // TODO add your handling code here:

        FileDialog fileDialog = new FileDialog(NotePadGUI.this,"Save File", FileDialog.SAVE);

        fileDialog.setVisible(true);

        if (fileDialog.getFile() != null) {
            fileName = fileDialog.getDirectory() + fileDialog.getFile();
            setTitle(fileName);
        }

        try {
            FileWriter fileWriter = new FileWriter(fileName);
            fileWriter.write(textArea.getText());
            setTitle(fileName);
            fileWriter.close();

        } catch(IOException e){
            System.out.println("File not found or corrupted");
        }
    }//GEN-LAST:event_saveFileActionPerformed

    private void cutTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutTextActionPerformed
        // TODO add your handling code here:
        String cutString = textArea.getSelectedText();
        StringSelection cutSelection = new StringSelection(cutString);
        clipBoard.setContents(cutSelection, cutSelection);
        textArea.replaceRange("", textArea.getSelectionStart(), textArea.getSelectionEnd());
    }//GEN-LAST:event_cutTextActionPerformed

    private void copyTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyTextActionPerformed
        // TODO add your handling code here:
        String copyString = textArea.getSelectedText();
        StringSelection copySelection = new StringSelection(copyString);
        clipBoard.setContents(copySelection, copySelection);

    }//GEN-LAST:event_copyTextActionPerformed

    private void pasteTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteTextActionPerformed
        // TODO add your handling code here:
        try{
            Transferable pasteText = clipBoard.getContents(NotePadGUI.this);
            String selectedText = (String) pasteText.getTransferData(DataFlavor.stringFlavor);
            textArea.replaceRange(selectedText, textArea.getSelectionStart(), textArea.getSelectionEnd());

        } catch(Exception e){
            System.out.println("Something went wrong!!");
        }
    }//GEN-LAST:event_pasteTextActionPerformed


    /**
     * @param stringToBeInserted the string to be inserted
     * @param initPosition the initial position of where to start inserting
     */
    private void multipleInsert(String stringToBeInserted, int initPosition){
        for(int i = 0 ; i < stringToBeInserted.length() ; i++){
            char ch = stringToBeInserted.charAt(i);
            data.update(OperationType.insert,ch,initPosition);
            initPosition++;
        }
        updateCursorPosition(initPosition);
    }

    /**
     * @param stringToBeDeleted the string to be deleted
     * @param initPosition the initial position of where to start deleting
     */
    private void multipleDelete(String stringToBeDeleted, int initPosition){
        for(int i = 0 ; i < stringToBeDeleted.length() ; i++){
            char ch = stringToBeDeleted.charAt(i);
            data.update(OperationType.remove,ch,initPosition);
        }
        updateCursorPosition(initPosition);
    }

    /**
     * It should be called by the controller to update the GUI, the data should be provided
     * The input it requires is the whole string
     * @param str the whole text
     * @param changedPosition the position that operation conducted
     * @param operationType the operation type
     */
    public void updateEditor(String str, int changedPosition, OperationType operationType){
        isFromOthers = true;
        textArea.setText(str);
        adjustCursorPosition(changedPosition,operationType);
        setCursorPosition();
        isFromOthers = false;
    }

    /**
     * check if the cursorPosition has been set to some value that's out of boundary
     */
    private void outOfBoundaryCheck(){
        int totalLength = textArea.getText().length();
        // make sure the cursorPosition doesn't go beyond boundary
        cursorPosition = cursorPosition < 0 ? 0 : cursorPosition;
        cursorPosition = cursorPosition > totalLength ? totalLength : cursorPosition;
    }

    /**
     * based on the operation type and position, adjust the cursor position accordingly
     * @param changedPosition   for insert, it means the position before inserting; for delete, it means the position after deleting
     * @param operationType     the operation type
     */
    private void adjustCursorPosition(int changedPosition, OperationType operationType){
//        changedPosition meaning:

//        cursorPosition = textArea.getCaretPosition();
//        System.out.println("cursor was at: "+cursorPosition);
//        System.out.println("changed position: "+changedPosition+" || operation: "+operationType.toString());

        switch(operationType){
            case insert:
                System.out.println("inserted a char at: "+changedPosition);
                if(changedPosition < cursorPosition){
                    cursorPosition++;
                }
                break;
            case remove:
                System.out.println("deleted a char at: "+(changedPosition));
                if(changedPosition < cursorPosition){
                    cursorPosition--;
                }
                break;
        }

        outOfBoundaryCheck();
//        System.out.println("cursor now at: "+cursorPosition);
    }

    /**
     * @param curPosition the cursor position about to be updated to
     */
    private void updateCursorPosition(int curPosition){
        cursorPosition = curPosition;
        outOfBoundaryCheck();
    }

    /**
     * set the cursor to a certain posiiton in the GUI
     */
    private void setCursorPosition(){
        textArea.setCaretPosition(cursorPosition);
    }

    /**
     * Initialise the Note Pad and Create the GUI
     * @param crdt holds the data in a doctree structure
     */
    public void init(Crdt crdt) {
        data = crdt;
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NotePadGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> setupGUI());
    }

    /**
     * Set up a new Note Pad GUI and make it visible
     */
    private void setupGUI(){
        instance = new NotePadGUI();
        instance.setVisible(true);
    }

//	public JTextArea getTextArea() {
//		return textArea;
//	}

    /**
     * Clean the current textArea
     */
	public void cleanDoc(){
        instance.textArea.setText("");
    }
    
    // End of variables declaration                   
}
